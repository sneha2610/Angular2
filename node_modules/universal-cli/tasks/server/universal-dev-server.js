"use strict";
var path = require('path');
var webpack_build_utils_1 = require('../../models/webpack-build-utils');
var nodemon = require('nodemon');
var tinyLr = require('tiny-lr');
var UniversalDevServer = (function () {
    function UniversalDevServer(webpackCompiler, webpackDevServerConfiguration) {
        this.webpackCompiler = webpackCompiler;
        this.webpackDevServerConfiguration = webpackDevServerConfiguration;
        this.appPath = '';
        this.appPath = path.join(webpackDevServerConfiguration.contentBase, "../dist/server/" + webpackDevServerConfiguration.filename.replace('.ts', '.bundle.js'));
        this.liveServer = new tinyLr.Server();
        this.liveServer.listen();
    }
    UniversalDevServer.prototype.listen = function (port, host, callBack) {
        var _this = this;
        this.nodemonConfig = {
            script: this.appPath,
            runOnChangeOnly: true,
            env: { 'PORT': port },
            verbose: true,
            ext: 'noop',
            watch: ['noop/'],
            ignore: ['*'],
            stdout: false,
            stderr: false
        };
        this.demon = nodemon(this.nodemonConfig);
        this.demon
            .on('restart', function () {
            setTimeout(function () {
                _this.liveServer.changed({
                    body: {
                        files: ['LiveReload files']
                    }
                });
            }, 800);
        })
            .on('stdout', function (stdout) {
            console.log(stdout.toString().trim());
        })
            .on('stderr', function (stderr) {
            console.log(stderr.toString());
        });
        this.webpackCompiler.plugin('done', function () {
            _this.demon.restart();
        });
        this.webpackCompiler.watch(this.webpackDevServerConfiguration, function (err, stats) {
            if (err) {
                console.error(err.stack || err);
                process.stdout.write('webpack: bundle is now INVALID.');
                if (err.details) {
                    console.error(err.details);
                }
            }
            process.stdout.write(stats.toString(webpack_build_utils_1.webpackOutputOptions) + '\n');
            process.stdout.write('webpack: bundle is now VALID\n');
            callBack(err, stats);
        });
    };
    return UniversalDevServer;
}());
exports.UniversalDevServer = UniversalDevServer;
//# sourceMappingURL=/home/david/angular-cli/packages/universal-cli/tasks/server/universal-dev-server.js.map