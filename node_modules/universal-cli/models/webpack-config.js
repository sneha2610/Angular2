"use strict";
var webpack_build_typescript_1 = require('./webpack-build-typescript');
var webpackMerge = require('webpack-merge');
var config_1 = require('./config');
var webpack_build_common_1 = require('./webpack-build-common');
var webpack_build_development_1 = require('./webpack-build-development');
var webpack_build_production_1 = require('./webpack-build-production');
var _1 = require('./');
var path = require('path');
var NgCliWebpackConfig = (function () {
    function NgCliWebpackConfig(ngCliProject, target, environment, outputDir, baseHref, i18nFile, i18nFormat, locale, isAoT, sourcemap, vendorChunk, verbose, progress) {
        if (isAoT === void 0) { isAoT = false; }
        if (sourcemap === void 0) { sourcemap = true; }
        if (vendorChunk === void 0) { vendorChunk = false; }
        if (verbose === void 0) { verbose = false; }
        if (progress === void 0) { progress = true; }
        this.ngCliProject = ngCliProject;
        this.target = target;
        this.environment = environment;
        // TODO: When webpack2 types are finished lets replace all these any types
        // so this is more maintainable in the future for devs
        this.configs = [];
        var config = config_1.CliConfig.fromProject();
        var appConfig = config.config.apps[0];
        appConfig.outDir = outputDir || appConfig.outDir;
        if (appConfig.universal === true && isAoT === true) {
            throw new Error('AoT is not supported in universal yet.');
        }
        var baseConfig = webpack_build_common_1.getWebpackCommonConfig(this.ngCliProject.root, environment, appConfig, baseHref, sourcemap, vendorChunk, verbose, progress);
        var targetConfigPartial = this.getTargetConfig(this.ngCliProject.root, appConfig, sourcemap, verbose);
        var typescriptConfigPartial = isAoT
            ? webpack_build_typescript_1.getWebpackAotConfigPartial(this.ngCliProject.root, appConfig, i18nFile, i18nFormat, locale)
            : webpack_build_typescript_1.getWebpackNonAotConfigPartial(this.ngCliProject.root, appConfig);
        if (appConfig.mobile) {
            var mobileConfigPartial = _1.getWebpackMobileConfigPartial(this.ngCliProject.root, appConfig);
            var mobileProdConfigPartial = _1.getWebpackMobileProdConfigPartial(this.ngCliProject.root, appConfig);
            baseConfig = webpackMerge(baseConfig, mobileConfigPartial);
            if (this.target == 'production') {
                targetConfigPartial = webpackMerge(targetConfigPartial, mobileProdConfigPartial);
            }
        }
        if (appConfig.universal === true) {
            var customClientConfig = require(path.join(this.ngCliProject.root, appConfig.webpackCustom.client));
            var customServerConfig = require(path.join(this.ngCliProject.root, appConfig.webpackCustom.server));
            this.configs.push(webpackMerge(baseConfig, targetConfigPartial, typescriptConfigPartial, customClientConfig));
            this.configs.push(webpackMerge(typescriptConfigPartial, _1.getWebpackNodeConfig(this.ngCliProject.root, environment, appConfig, baseHref, sourcemap, verbose, progress), customServerConfig));
        }
        else {
            this.configs.push(webpackMerge(baseConfig, targetConfigPartial, typescriptConfigPartial));
        }
    }
    NgCliWebpackConfig.prototype.getTargetConfig = function (projectRoot, appConfig, sourcemap, verbose) {
        switch (this.target) {
            case 'development':
                return webpack_build_development_1.getWebpackDevConfigPartial(projectRoot, appConfig);
            case 'production':
                return webpack_build_production_1.getWebpackProdConfigPartial(projectRoot, appConfig, sourcemap, verbose);
            default:
                throw new Error("Invalid build target. Only 'development' and 'production' are available.");
        }
    };
    return NgCliWebpackConfig;
}());
exports.NgCliWebpackConfig = NgCliWebpackConfig;
//# sourceMappingURL=/home/david/angular-cli/packages/universal-cli/models/webpack-config.js.map