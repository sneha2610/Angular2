"use strict";
var path = require('path');
var webpack = require('webpack');
var WebpackMd5Hash = require('webpack-md5-hash');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var compression_plugin_1 = require('../lib/webpack/compression-plugin');
var autoprefixer = require('autoprefixer');
var postcssDiscardComments = require('postcss-discard-comments');
var webpackMerge = require('webpack-merge');
var StringReplacePlugin = require('string-replace-webpack-plugin');
exports.getWebpackProdConfigPartial = function (projectRoot, appConfig, sourcemap, verbose) {
    var appRoot = path.resolve(projectRoot, appConfig.root);
    var universalPartial = {};
    if (appConfig.universal === true) {
        universalPartial = {
            module: {
                rules: [
                    {
                        test: /index.html$/,
                        loader: StringReplacePlugin.replace({
                            replacements: [
                                {
                                    pattern: /<script src="http:\/\/localhost:35729\/livereload\.js\?snipver=1"><\/script>/ig,
                                    replacement: function () { return ''; }
                                }
                            ]
                        })
                    }
                ]
            },
            plugins: [
                new StringReplacePlugin()
            ]
        };
    }
    var baseConfig = {
        output: {
            filename: '[name].[chunkhash].bundle.js',
            sourceMapFilename: '[name].[chunkhash].bundle.map',
            chunkFilename: '[id].[chunkhash].chunk.js'
        },
        plugins: [
            new ExtractTextPlugin('[name].[chunkhash].bundle.css'),
            new WebpackMd5Hash(),
            new webpack.DefinePlugin({
                'process.env.NODE_ENV': JSON.stringify('production')
            }),
            new webpack.LoaderOptionsPlugin({ minimize: true }),
            new webpack.optimize.UglifyJsPlugin({
                mangle: { screw_ie8: true },
                compress: { screw_ie8: true, warnings: verbose },
                sourceMap: sourcemap
            }),
            new compression_plugin_1.CompressionPlugin({
                asset: '[path].gz[query]',
                algorithm: 'gzip',
                test: /\.js$|\.html$|\.css$/,
                threshold: 10240
            }),
            // LoaderOptionsPlugin needs to be fully duplicated because webpackMerge will replace it.
            new webpack.LoaderOptionsPlugin({
                test: /\.(css|scss|sass|less|styl)$/,
                options: {
                    postcss: [
                        autoprefixer(),
                        postcssDiscardComments
                    ],
                    cssLoader: { sourceMap: sourcemap },
                    sassLoader: { sourceMap: sourcemap },
                    lessLoader: { sourceMap: sourcemap },
                    stylusLoader: { sourceMap: sourcemap },
                    // context needed as a workaround https://github.com/jtangelder/sass-loader/issues/285
                    context: projectRoot,
                }
            })
        ]
    };
    return webpackMerge(baseConfig, universalPartial);
};
//# sourceMappingURL=/home/david/angular-cli/packages/universal-cli/models/webpack-build-production.js.map