"use strict";
var path = require('path');
var webpack = require('webpack');
var compression_plugin_1 = require('../lib/webpack/compression-plugin');
var suppress_entry_chunks_webpack_plugin_1 = require('../plugins/suppress-entry-chunks-webpack-plugin');
var webpack_build_utils_1 = require('./webpack-build-utils');
var webpackMerge = require('webpack-merge');
var ExtractTextPlugin = require('extract-text-webpack-plugin');
var ProgressPlugin = require('webpack/lib/ProgressPlugin');
var autoprefixer = require('autoprefixer');
var postcssDiscardComments = require('postcss-discard-comments');
function getWebpackNodeConfig(projectRoot, environment, appConfig, baseHref, sourcemap, verbose, progress) {
    var checkNodeImport = function (context, request, cb) {
        if (!path.isAbsolute(request) && request.charAt(0) !== '.') {
            cb(null, 'commonjs ' + request);
            return;
        }
        cb();
    };
    var appRoot = path.resolve(projectRoot, appConfig.root);
    var nodeMain = path.resolve(appRoot, appConfig.nodeMain);
    var nodeModules = path.resolve(projectRoot, 'node_modules');
    var entryName = path.basename(nodeMain).replace('.ts', '');
    var extraPlugins = [];
    var extraRules = [];
    var lazyChunks = [];
    var entryPoints = {};
    entryPoints[entryName] = [nodeMain];
    // process global scripts
    if (appConfig.scripts.length > 0) {
        var globalScripts = webpack_build_utils_1.extraEntryParser(appConfig.scripts, appRoot, 'scripts');
        // add entry points and lazy chunks
        globalScripts.forEach(function (script) {
            if (script.lazy) {
                lazyChunks.push(script.entry);
            }
            entryPoints[script.entry] = (entryPoints[script.entry] || []).concat(script.path);
        });
        // load global scripts using script-loader
        extraRules.push({
            include: globalScripts.map(function (script) { return script.path; }), test: /\.js$/, loader: 'script-loader'
        });
    }
    // process global styles
    if (appConfig.styles.length === 0) {
        // create css loaders for component css
        extraRules.push.apply(extraRules, webpack_build_utils_1.makeCssLoaders());
    }
    else {
        var globalStyles = webpack_build_utils_1.extraEntryParser(appConfig.styles, appRoot, 'styles');
        var extractedCssEntryPoints_1 = [];
        // add entry points and lazy chunks
        globalStyles.forEach(function (style) {
            if (style.lazy) {
                lazyChunks.push(style.entry);
            }
            if (!entryPoints[style.entry]) {
                // since this entry point doesn't exist yet, it's going to only have
                // extracted css and we can supress the entry point
                extractedCssEntryPoints_1.push(style.entry);
                entryPoints[style.entry] = (entryPoints[style.entry] || []).concat(style.path);
            }
            else {
                // existing entry point, just push the css in
                entryPoints[style.entry].push(style.path);
            }
        });
        // create css loaders for component css and for global css
        extraRules.push.apply(extraRules, webpack_build_utils_1.makeCssLoaders(globalStyles.map(function (style) { return style.path; })));
        if (extractedCssEntryPoints_1.length > 0) {
            // don't emit the .js entry point for extracted styles
            extraPlugins.push(new suppress_entry_chunks_webpack_plugin_1.SuppressEntryChunksWebpackPlugin({ chunks: extractedCssEntryPoints_1 }));
        }
    }
    if (progress) {
        extraPlugins.push(new ProgressPlugin({ profile: verbose, colors: true }));
    }
    var commonConfig = {
        resolve: {
            extensions: ['.ts', '.js'],
            modules: [nodeModules]
        },
        resolveLoader: {
            modules: [nodeModules]
        },
        context: projectRoot,
        entry: entryPoints,
        output: {
            path: path.resolve(projectRoot, appConfig.outDir, '../server'),
            filename: '[name].bundle.js',
            libraryTarget: 'commonjs2'
        },
        module: {
            rules: [
                { enforce: 'pre', test: /\.js$/, loader: 'source-map-loader', exclude: [nodeModules] },
                { test: /\.json$/, loader: 'json-loader' },
                { test: /\.(jpg|png|gif)$/, loader: 'url-loader?limit=10000' },
                { test: /\.html$/, loader: 'raw-loader' },
                { test: /\.(otf|ttf|woff|woff2)$/, loader: 'url-loader?limit=10000' },
                { test: /\.(eot|svg)$/, loader: 'file-loader' }
            ].concat(extraRules)
        },
        plugins: [
            new webpack.ContextReplacementPlugin(
            // The (\\|\/) piece accounts for path separators in *nix and Windows
            /angular(\\|\/)core(\\|\/)src(\\|\/)linker/, path.resolve(__dirname, './src'), {}),
            new webpack.NormalModuleReplacementPlugin(
            // This plugin is responsible for swapping the environment files.
            // Since it takes a RegExp as first parameter, we need to escape the path.
            // See https://webpack.github.io/docs/list-of-plugins.html#normalmodulereplacementplugin
            new RegExp(path.resolve(appRoot, appConfig.environments['source'])
                .replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&')), path.resolve(appRoot, appConfig.environments[environment])),
        ].concat(extraPlugins),
        target: 'node',
        externals: checkNodeImport,
        node: {
            global: true,
            crypto: true,
            __dirname: false,
            __filename: true,
            process: true,
            Buffer: true
        }
    };
    var devConfig = {
        devtool: 'inline-source-map',
        plugins: [
            new ExtractTextPlugin({ filename: '[name].bundle.css' }),
            new webpack.LoaderOptionsPlugin({
                test: /\.(css|scss|sass|less|styl)$/,
                options: {
                    postcss: [autoprefixer()],
                    cssLoader: { sourceMap: sourcemap },
                    sassLoader: { sourceMap: sourcemap },
                    lessLoader: { sourceMap: sourcemap },
                    stylusLoader: { sourceMap: sourcemap },
                    // context needed as a workaround https://github.com/jtangelder/sass-loader/issues/285
                    context: projectRoot,
                },
            })
        ]
    };
    var prodConfig = {
        devtool: 'source-map',
        plugins: [
            new ExtractTextPlugin('[name].[chunkhash].bundle.css'),
            new webpack.LoaderOptionsPlugin({ minimize: true }),
            new webpack.optimize.UglifyJsPlugin({
                mangle: { screw_ie8: true },
                compress: { screw_ie8: true },
                sourceMap: true
            }),
            new compression_plugin_1.CompressionPlugin({
                asset: '[path].gz[query]',
                algorithm: 'gzip',
                test: /\.js$|\.html$/,
                threshold: 10240,
                minRatio: 0.8
            }),
            // LoaderOptionsPlugin needs to be fully duplicated because webpackMerge will replace it.
            new webpack.LoaderOptionsPlugin({
                test: /\.(css|scss|sass|less|styl)$/,
                options: {
                    postcss: [
                        autoprefixer(),
                        postcssDiscardComments
                    ],
                    cssLoader: { sourceMap: sourcemap },
                    sassLoader: { sourceMap: sourcemap },
                    lessLoader: { sourceMap: sourcemap },
                    stylusLoader: { sourceMap: sourcemap },
                    // context needed as a workaround https://github.com/jtangelder/sass-loader/issues/285
                    context: projectRoot,
                }
            })
        ]
    };
    if (environment === 'prod') {
        return webpackMerge(commonConfig, prodConfig);
    }
    else {
        return webpackMerge(commonConfig, devConfig);
    }
}
exports.getWebpackNodeConfig = getWebpackNodeConfig;
//# sourceMappingURL=/home/david/angular-cli/packages/universal-cli/models/webpack-build-node.js.map